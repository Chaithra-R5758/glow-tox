[{"/Users/akashhamse/Desktop/glow-tox/src/Header.js":"1","/Users/akashhamse/Desktop/glow-tox/src/routes/profile/index.js":"2","/Users/akashhamse/Desktop/glow-tox/src/components/navbar/index.js":"3","/Users/akashhamse/Desktop/glow-tox/src/routes/service/index.js":"4","/Users/akashhamse/Desktop/glow-tox/src/App.js":"5","/Users/akashhamse/Desktop/glow-tox/src/routes/gift-cards/create.js":"6","/Users/akashhamse/Desktop/glow-tox/src/routes/promotions/index.js":"7","/Users/akashhamse/Desktop/glow-tox/src/config/api/index.js":"8"},{"size":1784,"mtime":1608349101493,"results":"9","hashOfConfig":"10"},{"size":4225,"mtime":1608349101501,"results":"11","hashOfConfig":"10"},{"size":5222,"mtime":1608349101497,"results":"12","hashOfConfig":"10"},{"size":1815,"mtime":1608350445941,"results":"13","hashOfConfig":"10"},{"size":2266,"mtime":1608351431078,"results":"14","hashOfConfig":"10"},{"size":3280,"mtime":1608264418235,"results":"15","hashOfConfig":"10"},{"size":5625,"mtime":1608349101506,"results":"16","hashOfConfig":"10"},{"size":320,"mtime":1608264418227,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"14bpi3w",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/akashhamse/Desktop/glow-tox/src/Header.js",[],"/Users/akashhamse/Desktop/glow-tox/src/routes/profile/index.js",[],"/Users/akashhamse/Desktop/glow-tox/src/components/navbar/index.js",["36","37","38","39","40","41"],"import React from 'react';\r\nimport { withRouter, } from \"react-router-dom\";\r\nimport Icon from '@ant-design/icons';\r\nimport './navbar.scss';\r\nimport { NAV_OPTIONS, HEADER_TITLE } from '../../constants/';\r\nimport {\r\n  CaretLeftOutlined,\r\n  GiftFilled,\r\n  FundFilled,\r\n  ExperimentFilled,\r\n  AppstoreFilled,\r\n  HistoryOutlined,\r\n} from '@ant-design/icons';\r\nimport { getRouteName } from '../../utils/';\r\n//import { connect } from 'react-redux';\r\nimport Cookies from 'js-cookie';\r\n\r\nclass NavBar extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      top: false,\r\n      left: false,\r\n      bottom: false,\r\n      right: false,\r\n      selectedOption: '',\r\n      userType: '',\r\n      //  screenName: 'Home',\r\n      selectedNavOption: 0,\r\n    }\r\n  }\r\n\r\n  getIcon = (text) => {\r\n    return \"a\"\r\n  }\r\n\r\n  componentWillMount() {\r\n    const userType = Cookies.get('userType')\r\n    if (userType) {\r\n      this.setState({ userType })\r\n    }\r\n  }\r\n\r\n  toggleDrawer = (side, open) => event => {\r\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n      return;\r\n    }\r\n    this.setState({ left: open });\r\n  };\r\n\r\n  navItemClicked = (screenName, index) => {\r\n    this.props.history.push(getRouteName(screenName))\r\n    this.setState({ selectedNavOption: index })\r\n\r\n    // this.setState({selectedNavOption:index})\r\n  }\r\n\r\n  getIcon = (navOption, index, selectedNavOption) => {\r\n    const iconSize = '18px';\r\n    const grey3 = '#b1b1b1';\r\n    const white = '#fff';\r\n    switch (navOption) {\r\n      case 'Dashboard': return <AppstoreFilled style={{\r\n        fontSize: iconSize,\r\n        color: selectedNavOption === index ? white : grey3\r\n      }} />\r\n      case 'Services': return <ExperimentFilled style={{\r\n        fontSize: iconSize,\r\n        color: selectedNavOption === index ? white : grey3\r\n      }} />\r\n      case 'Promotions': return <FundFilled style={{\r\n        fontSize: iconSize,\r\n        color: selectedNavOption === index ? white : grey3\r\n      }} />\r\n      case 'Service History': return <HistoryOutlined style={{\r\n        fontSize: iconSize,\r\n        color: selectedNavOption === index ? white : grey3\r\n      }} />\r\n      case 'Gift Cards': return <GiftFilled style={{\r\n        fontSize: iconSize,\r\n        color: selectedNavOption === index ? white : grey3\r\n      }} />\r\n      default: return\r\n    }\r\n  }\r\n\r\n  getNavOptions = () => {\r\n    const grey3 = '#edf0f5';\r\n    const { selectedNavOption } = this.state\r\n    const result = NAV_OPTIONS.map((navOption, index) => {\r\n      return (\r\n        <div className={'nav-option'} onClick={() => this.navItemClicked(navOption, index)}>\r\n          <div>\r\n            {this.getIcon(navOption, index, selectedNavOption)}\r\n            {selectedNavOption === index &&\r\n              <span className={'caret-icon'}><CaretLeftOutlined style={{ color: grey3 }} /></span>\r\n            }\r\n          </div>\r\n          <div className={selectedNavOption === index ? 'nav-option-title-selected' : 'nav-option-title'}> {navOption} </div>\r\n        </div>\r\n      )\r\n    })\r\n    return result\r\n  }\r\n\r\n  sideList = (side, options) => (\r\n    <div\r\n      className={''}\r\n      style={{}}\r\n      role=\"presentation\"\r\n      onClick={this.toggleDrawer(side, false)}\r\n      onKeyDown={this.toggleDrawer(side, false)}>\r\n      <div className={'nav-title'}>{HEADER_TITLE}</div>\r\n      <div className={'nav-option-outer-wrapper'}>\r\n        {options.map((text, index) => (\r\n          <div\r\n            className={'nav-option-wrapper'}\r\n            key={text}\r\n            onClick={() => this.navItemClicked(text)}>\r\n            <span className={text === this.state.selectedOption ? 'nav-option-icon option-selected' : 'nav-option-icon'}>{this.getIcon(text)}</span>\r\n            <span className={text === this.state.selectedOption ? 'option-selected nav-option-title' : 'nav-option-title'}>{text}</span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n\r\n\r\n  render() {\r\n    //const { loginReducers } = this.props\r\n    const { selectedOption, userType, selectedNavOption } = this.state\r\n\r\n    // if (window.location.pathname === '/login' || window.location.pathname === '/')\r\n    //   return null\r\n    const iconSize = '18px';\r\n    const grey3 = '#b1b1b1';\r\n    return (\r\n      <div className={'nav-screen'}>\r\n        <div className={'navbar'} >\r\n          {/* <div className={'nav-title'}\r\n            onClick={this.toggleDrawer('left', true)}>\r\n             <DehazeIcon /> \r\n          </div> */}\r\n          <div className={'nav-options-wrapper'}>\r\n            {this.getNavOptions()}\r\n          </div>\r\n          {/* {userType && this.getNavOptions().map((text, index) => (\r\n            \r\n            <div\r\n              className={text === selectedOption ? 'nav-options option-selected' : 'nav-options'}\r\n              onClick={() => this.navItemClicked(text)}>\r\n              {this.getIcon(text)}\r\n            </div>\r\n            \r\n          ))} */}\r\n        </div>\r\n        {/* <Drawer open={this.state.left} onClose={this.toggleDrawer('left', false)}>\r\n            {userType && this.sideList('left', this.getNavOptions())}\r\n          </Drawer> */}\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default withRouter(NavBar)",["42","43"],"/Users/akashhamse/Desktop/glow-tox/src/routes/service/index.js",["44","45","46","47"],"/Users/akashhamse/Desktop/glow-tox/src/App.js",["48","49","50"],"/Users/akashhamse/Desktop/glow-tox/src/routes/gift-cards/create.js",["51"],"/Users/akashhamse/Desktop/glow-tox/src/routes/promotions/index.js",[],"/Users/akashhamse/Desktop/glow-tox/src/config/api/index.js",[],{"ruleId":"52","severity":1,"message":"53","line":3,"column":8,"nodeType":"54","messageId":"55","endLine":3,"endColumn":12},{"ruleId":"52","severity":1,"message":"56","line":132,"column":13,"nodeType":"54","messageId":"55","endLine":132,"endColumn":27},{"ruleId":"52","severity":1,"message":"57","line":132,"column":29,"nodeType":"54","messageId":"55","endLine":132,"endColumn":37},{"ruleId":"52","severity":1,"message":"58","line":132,"column":39,"nodeType":"54","messageId":"55","endLine":132,"endColumn":56},{"ruleId":"52","severity":1,"message":"59","line":136,"column":11,"nodeType":"54","messageId":"55","endLine":136,"endColumn":19},{"ruleId":"52","severity":1,"message":"60","line":137,"column":11,"nodeType":"54","messageId":"55","endLine":137,"endColumn":16},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"52","severity":1,"message":"65","line":2,"column":8,"nodeType":"54","messageId":"55","endLine":2,"endColumn":15},{"ruleId":"52","severity":1,"message":"66","line":4,"column":16,"nodeType":"54","messageId":"55","endLine":4,"endColumn":22},{"ruleId":"52","severity":1,"message":"67","line":4,"column":24,"nodeType":"54","messageId":"55","endLine":4,"endColumn":32},{"ruleId":"52","severity":1,"message":"68","line":5,"column":9,"nodeType":"54","messageId":"55","endLine":5,"endColumn":13},{"ruleId":"52","severity":1,"message":"69","line":1,"column":42,"nodeType":"54","messageId":"55","endLine":1,"endColumn":50},{"ruleId":"52","severity":1,"message":"70","line":1,"column":52,"nodeType":"54","messageId":"55","endLine":1,"endColumn":58},{"ruleId":"52","severity":1,"message":"71","line":2,"column":28,"nodeType":"54","messageId":"55","endLine":2,"endColumn":36},{"ruleId":"52","severity":1,"message":"66","line":3,"column":23,"nodeType":"54","messageId":"55","endLine":3,"endColumn":29},"no-unused-vars","'Icon' is defined but never used.","Identifier","unusedVar","'selectedOption' is assigned a value but never used.","'userType' is assigned a value but never used.","'selectedNavOption' is assigned a value but never used.","'iconSize' is assigned a value but never used.","'grey3' is assigned a value but never used.","no-native-reassign",["72"],"no-negated-in-lhs",["73"],"'testImg' is defined but never used.","'Button' is defined but never used.","'template' is defined but never used.","'Meta' is assigned a value but never used.","'Redirect' is defined but never used.","'Switch' is defined but never used.","'Suspense' is defined but never used.","no-global-assign","no-unsafe-negation"]